{"version":3,"sources":["web.js"],"names":["debug","DEFAULT_HTTP_PORT","DEFAULT_HTTPS_PORT","DEFAULT_MAX_REDIRECT_COUNT","DEFAULT_RETRY_COUNT","DEFAULT_TIMEOUT","EVENT_REDIRECT","EVENT_REQUEST","EVENT_RESPONSE","FIRST_TRY","HTTP_ERROR_CODE_THRESHHOLD","HTTP_ERROR_CODE_RETRY_THRESHHOLD","HTTP_PROXY_REQUIRED","HTTP_REDIRECT_CODE_PERM","HTTP_REDIRECT_CODE_TEMP","HTTP_REDIRECT_NEW_CODE_PERM","HTTP_REDIRECT_NEW_CODE_TEMP","HTTPS_RE","REQUEST_OPTIONS","SECURE_PROTOCOL_RE","TOP_LEVEL_REDIRECT_RE","_augmentRequestOptions","options","augmented","self","forEach","field","value","Validation","coalesce","settings","isEmpty","maxRetries","rawStream","timeout","path","pathname","_exec","data","tryCount","callback","undefined","headers","exec","redirectCount","Promise","resolve","reject","JSON","stringify","Buffer","byteLength","json","proxy","host","hostname","parse","indexOf","port","join","secure","test","protocol","emit","makeRequest","req","request","res","chunks","context","statusCode","redirect","some","code","err","Error","response","location","redirectUrl","pathParts","match","search","method","setImmediate","setEncoding","on","chunk","push","once","body","retry","length","setTimeout","abort","write","end","promiseOrCallback","Request","EventEmitter"],"mappings":"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","file":"web.js","sourcesContent":["'use strict'\n\nimport 'babel-polyfill';\nimport 'source-map-support/register';\nimport core from './core.js';\nimport debugLog from 'debug';\nimport events from 'events';\nimport http from 'http';\nimport https from 'https';\nimport path from 'path';\nimport url from 'url';\n\nconst\n\tdebug = debugLog('craigslist'),\n\tDEFAULT_HTTP_PORT = 80,\n\tDEFAULT_HTTPS_PORT = 443,\n\tDEFAULT_MAX_REDIRECT_COUNT = 5,\n\tDEFAULT_RETRY_COUNT = 3,\n\tDEFAULT_TIMEOUT = 30000,\n\tEVENT_REDIRECT = 'redirect',\n\tEVENT_REQUEST = 'request',\n\tEVENT_RESPONSE = 'response',\n\tFIRST_TRY = 1,\n\tHTTP_ERROR_CODE_THRESHHOLD = 400,\n\tHTTP_ERROR_CODE_RETRY_THRESHHOLD = 500,\n\t// reference: https://en.wikipedia.org/wiki/List_of_HTTP_status_codes#3xx_Redirection\n\tHTTP_PROXY_REQUIRED = 305,\n\tHTTP_REDIRECT_CODE_PERM = 301,\n\tHTTP_REDIRECT_CODE_TEMP = 302,\n\tHTTP_REDIRECT_NEW_CODE_PERM = 308,\n\tHTTP_REDIRECT_NEW_CODE_TEMP = 307,\n\tHTTPS_RE = /^https\\:?/i,\n\tREQUEST_OPTIONS = [\n\t\t'agent',\n\t\t'auth',\n\t\t'family',\n\t\t'headers',\n\t\t'host',\n\t\t'hostname',\n\t\t'json',\n\t\t'localAddress',\n\t\t'maxRetries',\n\t\t'method',\n\t\t'path',\n\t\t'pathname',\n\t\t'port',\n\t\t'protocol',\n\t\t'proxy',\n\t\t'query',\n\t\t'rejectUnauthorized',\n\t\t'maxRetries',\n\t\t'rawStream',\n\t\t'secure',\n\t\t'socketPath',\n\t\t'timeout'],\n\tSECURE_PROTOCOL_RE = /^https/i,\n\tTOP_LEVEL_REDIRECT_RE = /^\\/{2}([a-z0-9\\-\\_\\.]*)([\\/a-z\\-\\_\\.]*)/i;\n\nfunction _augmentRequestOptions (options) {\n\tlet\n\t\taugmented = {},\n\t\t/*eslint no-invalid-this:0*/\n\t\tself = this;\n\n\t// ensure options exist\n\toptions = options || {};\n\n\t// apply settings from Ctor\n\tREQUEST_OPTIONS.forEach((field) => {\n\t\tlet value = core.Validation.coalesce(options[field], self.settings[field]);\n\n\t\tif (!core.Validation.isEmpty(value)) {\n\t\t\tdebug(\n\t\t\t\t'request %s will be set to %s (options = %s, settings = %s)',\n\t\t\t\tfield,\n\t\t\t\tvalue,\n\t\t\t\toptions[field],\n\t\t\t\tself.settings[field]);\n\t\t\taugmented[field] = value;\n\t\t}\n\t});\n\n\t// ensure maxRetries is applied if one is not supplied\n\taugmented.maxRetries = core.Validation.coalesce(\n\t\taugmented.maxRetries,\n\t\tDEFAULT_RETRY_COUNT);\n\n\t// ensure rawStream setting is applied if not supplied\n\taugmented.rawStream = core.Validation.isEmpty(augmented.rawStream) ?\n\t\tfalse :\n\t\taugmented.rawStream;\n\n\t// ensure default timeout is applied if one is not supplied\n\taugmented.timeout = core.Validation.coalesce(augmented.timeout, DEFAULT_TIMEOUT);\n\n\t// create `path` from pathname and query.\n\taugmented.path = core.Validation.coalesce(augmented.path, augmented.pathname);\n\n\treturn augmented;\n}\n\nfunction _exec (options, data, tryCount, callback) {\n\tif (typeof data === 'function' && core.Validation.isEmpty(callback)) {\n\t\tcallback = data;\n\t\t/*eslint no-undefined:0*/\n\t\tdata = undefined;\n\t\ttryCount = FIRST_TRY;\n\t}\n\n\tif (typeof tryCount === 'function' && core.Validation.isEmpty(callback)) {\n\t\tcallback = tryCount;\n\t\ttryCount = FIRST_TRY;\n\t}\n\n\tdata = data || '';\n\toptions.headers = options.headers || {};\n\ttryCount = tryCount || FIRST_TRY;\n\n\tlet\n\t\texec,\n\t\tredirectCount = 0,\n\t\t/*eslint no-invalid-this:0*/\n\t\tself = this;\n\n\texec = new Promise(function (resolve, reject) {\n\t\tif (typeof data !== 'string') {\n\t\t\tdata = JSON.stringify(data);\n\t\t}\n\n\t\t// apply content length header\n\t\toptions.headers['Content-Length'] = Buffer.byteLength(data);\n\n\t\t// apply application/json header if appropriate\n\t\tif (!options.rawStream && options.json && !options.headers['Content-Type']) {\n\t\t\toptions.headers['Content-Type'] = 'application/json';\n\t\t}\n\n\t\t// apply proxy settings, as appropriate\n\t\tif (!core.Validation.isEmpty(options.proxy)) {\n\t\t\tlet\n\t\t\t\thost = options.host || options.hostname,\n\t\t\t\tproxy = url.parse(options.proxy);\n\n\t\t\t// set the host header to the destination server\n\t\t\toptions.headers['Host'] = host;\n\n\t\t\t// ensure the path property includes the full destination URL (and port)\n\t\t\tif (options.path.indexOf(host) < 0) {\n\t\t\t\tif (options.port && [DEFAULT_HTTP_PORT, DEFAULT_HTTPS_PORT].indexOf(options.port) < 0) {\n\t\t\t\t\thost = [host, options.port].join(':');\n\t\t\t\t}\n\n\t\t\t\toptions.path = [\n\t\t\t\t\toptions.secure ? 'https' : 'http',\n\t\t\t\t\tpath.join(host, options.path)].join('://');\n\t\t\t}\n\n\t\t\t// set the secure settings, host and port for the options to the proxy server\n\t\t\toptions.host = proxy.host;\n\t\t\toptions.port = proxy.port;\n\t\t\toptions.secure = HTTPS_RE.test(proxy.protocol);\n\n\t\t\tdebug('proxy settings (%s) detected and applied: %o', options.proxy, options);\n\t\t}\n\n\t\t// provide request event\n\t\tif (self.emit) {\n\t\t\tself.emit(EVENT_REQUEST, options);\n\t\t}\n\n\t\tlet makeRequest = function () {\n\t\t\tdebug('establishing request with options: %o', options);\n\t\t\tlet req = (options.secure ? https : http).request(\n\t\t\t\toptions,\n\t\t\t\t(res) => {\n\t\t\t\t\tlet\n\t\t\t\t\t\tchunks = [],\n\t\t\t\t\t\tcontext = {\n\t\t\t\t\t\t\theaders : res.headers,\n\t\t\t\t\t\t\tstatusCode : res.statusCode\n\t\t\t\t\t\t},\n\t\t\t\t\t\tredirect = [\n\t\t\t\t\t\t\tHTTP_REDIRECT_CODE_PERM,\n\t\t\t\t\t\t\tHTTP_REDIRECT_CODE_TEMP,\n\t\t\t\t\t\t\tHTTP_REDIRECT_NEW_CODE_PERM,\n\t\t\t\t\t\t\tHTTP_REDIRECT_NEW_CODE_TEMP\n\t\t\t\t\t\t].some((code) => (code === context.statusCode));\n\n\t\t\t\t\t// provide response event (as there are response headers)\n\t\t\t\t\tif (self.emit) {\n\t\t\t\t\t\tself.emit(EVENT_RESPONSE, context);\n\t\t\t\t\t}\n\n\t\t\t\t\tif (context.statusCode === HTTP_PROXY_REQUIRED) {\n\t\t\t\t\t\tlet err = new Error('proxy server configuration required');\n\t\t\t\t\t\terr.options = options;\n\t\t\t\t\t\terr.response = context;\n\n\t\t\t\t\t\tdebug('error: proxy server required: %o', err);\n\n\t\t\t\t\t\treturn reject(err);\n\t\t\t\t\t}\n\n\t\t\t\t\t// check for HTTP redirect\n\t\t\t\t\tif (redirect) {\n\t\t\t\t\t\tif (core.Validation.isEmpty(context.headers.location)) {\n\t\t\t\t\t\t\tlet err = new Error('redirect requested with no location');\n\t\t\t\t\t\t\terr.options = options;\n\t\t\t\t\t\t\terr.response = context;\n\n\t\t\t\t\t\t\tdebug('error: missing redirect header: %o', err);\n\n\t\t\t\t\t\t\treturn reject(err);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif (redirectCount >= DEFAULT_MAX_REDIRECT_COUNT) {\n\t\t\t\t\t\t\tlet err = new Error('maximum redirect limit exceeded');\n\t\t\t\t\t\t\terr.options = options;\n\t\t\t\t\t\t\terr.response = context;\n\n\t\t\t\t\t\t\tdebug('error: exceeded max number of redirects: %o', err);\n\n\t\t\t\t\t\t\treturn reject(err);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// remap options and redirect to supplied URL\n\t\t\t\t\t\tlet redirectUrl = url.parse(context.headers.location);\n\n\t\t\t\t\t\tif (TOP_LEVEL_REDIRECT_RE.test(redirectUrl.pathname)) {\n\t\t\t\t\t\t\tdebug('top level domain detected in location: %o', redirectUrl);\n\t\t\t\t\t\t\tlet pathParts = redirectUrl.pathname.match(TOP_LEVEL_REDIRECT_RE);\n\n\t\t\t\t\t\t\t// ensure the hostname is corrected\n\t\t\t\t\t\t\tredirectUrl.host = pathParts[1];\n\t\t\t\t\t\t\tredirectUrl.hostname = pathParts[1];\n\n\t\t\t\t\t\t\t// update the path and pathname appropriately\n\t\t\t\t\t\t\tredirectUrl.path = [pathParts[2], redirectUrl.search].join('');\n\t\t\t\t\t\t\tredirectUrl.pathname = pathParts[2];\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\toptions = {\n\t\t\t\t\t\t\thost : redirectUrl.host || options.host || options.hostname,\n\t\t\t\t\t\t\tmethod : options.method,\n\t\t\t\t\t\t\tpath : redirectUrl.path,\n\t\t\t\t\t\t\tpathname : redirectUrl.pathname,\n\t\t\t\t\t\t\trawStream : options.rawStream,\n\t\t\t\t\t\t\tsecure : (redirectUrl.protocol ?\n\t\t\t\t\t\t\t\tSECURE_PROTOCOL_RE.test(redirectUrl.protocol) :\n\t\t\t\t\t\t\t\toptions.secure)\n\t\t\t\t\t\t};\n\n\t\t\t\t\t\t// increment number of redirects (to avoid endless looping)\n\t\t\t\t\t\tredirectCount ++;\n\n\t\t\t\t\t\t// emit redirect event\n\t\t\t\t\t\tif (self.emit) {\n\t\t\t\t\t\t\tself.emit(EVENT_REDIRECT, options);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// re-request based on the redirect location\n\t\t\t\t\t\treturn setImmediate(makeRequest);\n\t\t\t\t\t}\n\n\t\t\t\t\t// for content-api requests (or other raw binary data requests)\n\t\t\t\t\t// rawStream may be set to true - in the event of this, return\n\t\t\t\t\t// the response directly\n\t\t\t\t\tif (options.rawStream) {\n\t\t\t\t\t\tif (context.statusCode >= HTTP_ERROR_CODE_THRESHHOLD) {\n\t\t\t\t\t\t\tlet err = new Error('resource not found');\n\t\t\t\t\t\t\terr.context = context;\n\n\t\t\t\t\t\t\tdebug('error: unable to process response: %o', context.statusCode);\n\n\t\t\t\t\t\t\treturn reject(err);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tdebug('returning response as stream');\n\n\t\t\t\t\t\treturn resolve(res);\n\t\t\t\t\t}\n\n\t\t\t\t\t// standard API requests flow through below...\n\t\t\t\t\tres.setEncoding('utf-8');\n\n\t\t\t\t\tres.on('data', (chunk) => (chunks.push(chunk)));\n\n\t\t\t\t\tres.once('end', () => {\n\t\t\t\t\t\tlet\n\t\t\t\t\t\t\tbody = chunks.join(''),\n\t\t\t\t\t\t\tretry =\n\t\t\t\t\t\t\t\tcontext.statusCode >= HTTP_ERROR_CODE_RETRY_THRESHHOLD &&\n\t\t\t\t\t\t\t\ttryCount <= options.maxRetries;\n\n\t\t\t\t\t\t// attempt to parse the body\n\t\t\t\t\t\tif (typeof body === 'string' && body.length && options.json) {\n\t\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\t\tbody = JSON.parse(body);\n\t\t\t\t\t\t\t} catch (err) {\n\t\t\t\t\t\t\t\terr.body = body;\n\t\t\t\t\t\t\t\terr.context = context;\n\n\t\t\t\t\t\t\t\tdebug('error: unable to parse JSON response: %o', err);\n\n\t\t\t\t\t\t\t\treturn reject(err);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// handle retry if error code is above threshhold\n\t\t\t\t\t\tif (retry) {\n\t\t\t\t\t\t\tdebug(\n\t\t\t\t\t\t\t\t'retry: response status code: %o',\n\t\t\t\t\t\t\t\tcontext.statusCode);\n\t\t\t\t\t\t\ttryCount += 1;\n\t\t\t\t\t\t\treturn makeRequest();\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// handle other response errors\n\t\t\t\t\t\tif (context.statusCode >= HTTP_ERROR_CODE_THRESHHOLD) {\n\t\t\t\t\t\t\tlet err = new Error('resource not found');\n\t\t\t\t\t\t\terr.body = body;\n\t\t\t\t\t\t\terr.context = context;\n\n\t\t\t\t\t\t\tdebug('error: resource not found: %o', err);\n\n\t\t\t\t\t\t\treturn reject(err);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tdebug('successfully completed request');\n\n\t\t\t\t\t\t// resolve the request as complete\n\t\t\t\t\t\treturn resolve(body || '');\n\t\t\t\t\t});\n\t\t\t\t});\n\n\t\t\treq.on('error', (err) => {\n\t\t\t\tdebug('error: unable to establish connection: %o', err);\n\n\t\t\t\t// retry if below retry count threshhold\n\t\t\t\tif (tryCount <= options.maxRetries) {\n\t\t\t\t\tdebug(\n\t\t\t\t\t\t'retry: %d retries remaining',\n\t\t\t\t\t\toptions.maxRetries - tryCount);\n\t\t\t\t\ttryCount += 1;\n\t\t\t\t\treturn makeRequest();\n\t\t\t\t}\n\n\t\t\t\treturn reject(err)\n\t\t\t});\n\n\t\t\t// timeout the connection\n\t\t\tif (options.timeout) {\n\t\t\t\tdebug('setting timeout value to %o', options.timeout);\n\t\t\t\treq.setTimeout(options.timeout, req.abort);\n\t\t\t}\n\n\t\t\t// write data to the connection\n\t\t\tif (data) {\n\t\t\t\tdebug('writing %d bytes of data', options.headers['Content-Length']);\n\t\t\t\treq.write(data);\n\t\t\t}\n\n\t\t\t// signal end of request data\n\t\t\treq.end();\n\t\t}\n\n\t\t// do it!\n\t\tmakeRequest();\n\t});\n\n\treturn core.Validation.promiseOrCallback(exec, callback);\n}\n\nexport class Request extends events.EventEmitter {\n\tconstructor (settings) {\n\t\tsuper();\n\t\tthis.settings = settings || {};\n\t}\n\n\t/*\n\tdelete (options, callback) {\n\t\tdebug('performing DELETE (%o)', options);\n\t\toptions = this::_augmentRequestOptions(options);\n\t\toptions.method = 'DELETE';\n\n\t\treturn this::_exec(options, callback);\n\t}\n\t//*/\n\n\tget (options, callback) {\n\t\tdebug('performing GET (%o)', options);\n\t\toptions = this::_augmentRequestOptions(options);\n\t\toptions.method = 'GET';\n\n\t\treturn this::_exec(options, callback);\n\t}\n\n\tgetRequestOptions (options) {\n\t\treturn this::_augmentRequestOptions(options);\n\t}\n\n\t/*\n\thead (options, callback) {\n\t\tdebug('performing HEAD (%o)', options);\n\t\toptions = this::_augmentRequestOptions(options);\n\t\toptions.method = 'HEAD';\n\n\t\treturn this::_exec(options, callback);\n\t}\n\t//*/\n\n\t/*\n\tpost (options, data, callback) {\n\t\tdebug('performing POST (%o)', options);\n\t\toptions = this::_augmentRequestOptions(options);\n\t\toptions.method = 'POST';\n\n\t\treturn this::_exec(options, data, callback);\n\t}\n\t//*/\n\n\t/*\n\tput (options, data, callback) {\n\t\tdebug('performing PUT (%o)', options);\n\t\toptions = this::_augmentRequestOptions(options);\n\t\toptions.method = 'PUT';\n\n\t\treturn this::_exec(options, data, callback);\n\t}\n\t//*/\n}\n\nexport default { Request }\n"]}